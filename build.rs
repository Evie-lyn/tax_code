use std::collections::HashMap;
use std::env;
use std::fs;
use std::path::Path;
use serde::Deserialize;
use heck::AsSnakeCase;

#[derive(Debug, Deserialize)]
struct JsonBracket {
    upper_bound: Option<f64>,
    rate: f64,
}

type JsonTaxData = HashMap<String, HashMap<String, HashMap<String, Vec<JsonBracket>>>>;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let cargo_manifest_dir = env::var("CARGO_MANIFEST_DIR")?;

    let json_input_path = Path::new(&cargo_manifest_dir).join("src").join("Bracket.json");

    let generated_output_path = Path::new(&cargo_manifest_dir).join("src").join("generated_tax_data.rs");

    println!("cargo:rerun-if-changed={}", json_input_path.display());
    println!("cargo:rerun-if-changed=build.rs");

    eprintln!("DEBUG: build.rs started.");
    eprintln!("DEBUG: Reading JSON from: {:?}", json_input_path.display());
    eprintln!("DEBUG: Writing generated code to: {:?}", generated_output_path.display());

    let json_content = fs::read_to_string(&json_input_path)
        .map_err(|e| format!("Failed to read JSON from {}: {}", json_input_path.display(), e))?;

    let parsed_data: JsonTaxData = serde_json::from_str(&json_content)
        .map_err(|e| format!("Failed to parse JSON from {}: {}", json_input_path.display(), e))?;

    let mut data_output = String::new();

    data_output.push_str("// This file is automatically generated by build.rs\n");
    data_output.push_str("// Do not edit this file directly. Changes will be overwritten.\n\n");
    data_output.push_str("#[derive(Debug, Clone, Copy)]\n");
    data_output.push_str("pub struct Bracket(pub f64, pub f64); // upper_boundary, tax_rate\n\n");

    for (state_code, state_data) in parsed_data {
        for (year, year_data) in state_data {
            for (filing_status, brackets) in year_data {
                let snake_case_filing_status = AsSnakeCase(filing_status.as_str()).to_string();
                let func_name = format!("{}_{}_tax_{}",
                    state_code.to_lowercase(),
                    snake_case_filing_status,
                    year
                );

                data_output.push_str(&format!("pub fn {}() -> Vec<Bracket> {{\n", func_name));
                data_output.push_str("    vec![\n");

                for bracket in brackets {
                    let upper_bound_str = match bracket.upper_bound {
                        Some(val) => format!("{}.0", val), 
                        None => "f64::INFINITY".to_string(),
                    };
                    data_output.push_str(&format!("        Bracket({}, {:.1}),\n", upper_bound_str, bracket.rate));
                }
                data_output.push_str("    ]\n");
                data_output.push_str("}\n\n");
            }
        }
    }

    fs::write(&generated_output_path, data_output)
        .map_err(|e| format!("Failed to write to {}: {}", generated_output_path.display(), e))?;

    eprintln!("DEBUG: Successfully wrote generated code to: {:?}", generated_output_path.display());
    Ok(())
}